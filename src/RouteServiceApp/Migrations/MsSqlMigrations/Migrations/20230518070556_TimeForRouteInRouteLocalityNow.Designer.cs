// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RouteServiceAPP.Infrastructure;

namespace RouteServiceAPP.Infrastructure.Migrations
{
    [DbContext(typeof(RouteServiceContext))]
    [Migration("20230518070556_TimeForRouteInRouteLocalityNow")]
    partial class TimeForRouteInRouteLocalityNow
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RouteServiceAPP.Domain.Entities.BookedRoute", b =>
                {
                    b.Property<int>("BookedRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FromName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<string>("ToName")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BookedRouteId");

                    b.HasIndex("FromName");

                    b.HasIndex("RouteId");

                    b.HasIndex("ToName");

                    b.ToTable("BookedRoutes");
                });

            modelBuilder.Entity("RouteServiceAPP.Domain.Entities.Locality", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Name");

                    b.ToTable("Localities");
                });

            modelBuilder.Entity("RouteServiceAPP.Domain.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("SeatEndNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeatStartNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("RouteServiceAPP.Domain.Entities.RouteLocality", b =>
                {
                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocalityName")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RouteId", "OrdinalNumber");

                    b.HasIndex("LocalityName");

                    b.ToTable("RouteLocalities");
                });

            modelBuilder.Entity("RouteServiceAPP.Domain.Entities.Seat", b =>
                {
                    b.Property<int>("BookedRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("BookedRouteId", "Number");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("RouteServiceAPP.Domain.Entities.BookedRoute", b =>
                {
                    b.HasOne("RouteServiceAPP.Domain.Entities.Locality", "From")
                        .WithMany()
                        .HasForeignKey("FromName");

                    b.HasOne("RouteServiceAPP.Domain.Entities.Route", "Route")
                        .WithMany("BookedRoutes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouteServiceAPP.Domain.Entities.Locality", "To")
                        .WithMany()
                        .HasForeignKey("ToName");

                    b.Navigation("From");

                    b.Navigation("Route");

                    b.Navigation("To");
                });

            modelBuilder.Entity("RouteServiceAPP.Domain.Entities.RouteLocality", b =>
                {
                    b.HasOne("RouteServiceAPP.Domain.Entities.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityName");

                    b.HasOne("RouteServiceAPP.Domain.Entities.Route", "Route")
                        .WithMany("RouteLocalities")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locality");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("RouteServiceAPP.Domain.Entities.Seat", b =>
                {
                    b.HasOne("RouteServiceAPP.Domain.Entities.BookedRoute", "BookedRoute")
                        .WithMany("Seats")
                        .HasForeignKey("BookedRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookedRoute");
                });

            modelBuilder.Entity("RouteServiceAPP.Domain.Entities.BookedRoute", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("RouteServiceAPP.Domain.Entities.Route", b =>
                {
                    b.Navigation("BookedRoutes");

                    b.Navigation("RouteLocalities");
                });
#pragma warning restore 612, 618
        }
    }
}
